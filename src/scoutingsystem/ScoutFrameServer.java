/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scoutingsystem;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.UUID;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.microedition.io.StreamConnectionNotifier;

/**
 *
 * @author John
 */
public class ScoutFrameServer extends javax.swing.JFrame implements Runnable{
private static HashMap fields;
boolean bluetooth = true;
    /**
     * Creates new form ScoutServerFrame
     */
    public void handleData(HashMap in)
    {
        try
        {
            switch ((Integer)in.get(fields.get("scoutNumber")))
            {
                case 0: jCheckBox1.setSelected(true); 
                    name1.setText(in.get(fields.get("scoutsName")).toString());
                break;
                case 1: jCheckBox2.setSelected(true); 
                    name2.setText(in.get(fields.get("scoutsName")).toString());
                break;
                case 2: jCheckBox3.setSelected(true); 
                    name3.setText(in.get(fields.get("scoutsName")).toString());
                break;
                case 3: jCheckBox4.setSelected(true); 
                    name4.setText(in.get(fields.get("scoutsName")).toString());
                break;
                case 4: jCheckBox5.setSelected(true); 
                    name5.setText(in.get(fields.get("scoutsName")).toString());
                break;
                case 5: jCheckBox6.setSelected(true); 
                    name6.setText(in.get(fields.get("scoutsName")).toString());
                break;
            }
        }
        catch (Exception e)
        {
            
        }
    }
    public ScoutFrameServer() {
        initComponents();
        Thread me = new Thread(this);
        me.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        name1 = new javax.swing.JLabel();
        name2 = new javax.swing.JLabel();
        name3 = new javax.swing.JLabel();
        name4 = new javax.swing.JLabel();
        name5 = new javax.swing.JLabel();
        name6 = new javax.swing.JLabel();
        blueWon = new javax.swing.JCheckBox();
        redWon = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(0, 51, 204));
        jCheckBox1.setText("Blue 1");

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(0, 51, 204));
        jCheckBox2.setText("Blue 2");

        jCheckBox3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox3.setForeground(new java.awt.Color(0, 51, 204));
        jCheckBox3.setText("Blue 3");

        jCheckBox4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox4.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox4.setText("Red 1");
        jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jCheckBox5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox5.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox5.setText("Red 2");
        jCheckBox5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jCheckBox6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox6.setForeground(new java.awt.Color(255, 0, 0));
        jCheckBox6.setText("Red 3");
        jCheckBox6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        name1.setText("name 1");

        name2.setText("name 2");

        name3.setText("name 3");

        name4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        name4.setText("name 4");

        name5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        name5.setText("name 5");

        name6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        name6.setText("name 6");

        blueWon.setForeground(new java.awt.Color(0, 0, 204));
        blueWon.setText("Blue Won");

        redWon.setForeground(new java.awt.Color(255, 0, 0));
        redWon.setText("Red Won");
        redWon.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        redWon.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(name2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(name3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(blueWon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(redWon))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox3)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox6)
                                .addGap(18, 18, 18)
                                .addComponent(name6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox2)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox5)
                                .addGap(18, 18, 18)
                                .addComponent(name5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox4)
                                .addGap(18, 18, 18)
                                .addComponent(name4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox4)
                    .addComponent(name1)
                    .addComponent(name4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox5)
                    .addComponent(name2)
                    .addComponent(name5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox6)
                    .addComponent(name3)
                    .addComponent(name6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blueWon)
                    .addComponent(redWon))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
jCheckBox1.setSelected(false);
jCheckBox2.setSelected(false);
jCheckBox3.setSelected(false);
jCheckBox4.setSelected(false);
jCheckBox5.setSelected(false);
jCheckBox6.setSelected(false);
blueWon.setSelected(false);
redWon.setSelected(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScoutFrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScoutFrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScoutFrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoutFrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        fields = new HashMap();
        for (int i = 0; i < DataScheme.class.getFields().length; i++)
        {
            fields.put(DataScheme.class.getFields()[i].getName(), i);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ScoutFrameServer().setVisible(true);
                Networker.init();
                int[] teamList = new int[]{25,87,103,272,303,304,341,357,433,486,708,709,816,834,1168,1218,1391,1495,1640,1647,1712,1791,1807,2016,2234,2539,2590,2607,2729,3151,3167,3974,4128,4342,4373,4637,4750,4954,5113,5181};
               for (int i = 0; i < teamList.length; i ++)
               {
                    HashMap yay = SQLiteManager.chooseData(teamList[i]);
                    System.out.print(teamList[i]);
                    System.out.print(",");
            for (int di = 0; di < DataScheme.class.getFields().length; di++)
            {
                
                String s = DataScheme.class.getFields()[di].getName();
                if (s!="defenceNotes"&&s!="generalNotes"&&s!="scoutsName"&&s!="team")
                {
                    System.out.print(yay.get(s));
                    System.out.print(",");
                }
            }
            System.out.println(yay.get("matches"));
//                    System.out.print(teamList[i]);
//                    System.out.print(",");
//                    System.out.print(yay.get("teleopHighHits"));
//                    System.out.print(",");
//                    System.out.println(yay.get("autonHighHotHits"));
               }
                
               
                //System.out.println(((HashMap)teams.get(2607)).);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox blueWon;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel name1;
    private javax.swing.JLabel name2;
    private javax.swing.JLabel name3;
    private javax.swing.JLabel name4;
    private javax.swing.JLabel name5;
    private javax.swing.JLabel name6;
    private javax.swing.JCheckBox redWon;
    // End of variables declaration//GEN-END:variables
private int johnnyCash[] = new int[6];
    @Override
    public void run()
    {
        try {
            SQLiteManager.construct();
            
            if (bluetooth) BTServer(); else TCPServer();
            } catch (Exception ex) {}
    }
    public void TCPServer() throws Exception
    {
        ServerSocket serverConnection = new ServerSocket(26071);
        
            while (true)
            {
                Socket incoming = serverConnection.accept();
                new tcpClient(incoming).start();
            }
    }
    private class tcpClient implements Runnable
    {
        private final Socket mine;
        private final Thread me;
        public tcpClient(Socket mine)
        {
            this.mine = mine;
            me = new Thread(this);
        }
        public void start()
        {
            me.start();
        }
        @Override
        public void run() {
            DataOutputStream echo;
            ByteBuffer packet;
            HashMap data;
            try {
                echo = new DataOutputStream(mine.getOutputStream());
                packet = Networker.recieve(mine.getInputStream());
                data = Networker.unpack(packet);
                SQLiteManager.addData(data);
                echo.writeBoolean(redWon.isSelected());
                echo.writeBoolean(blueWon.isSelected());
                echo.flush();
                mine.close();
                handleData(data);
                echo.close();
            } catch (IOException ex) {
            }
        }
        
    }
    public final UUID uuid = new UUID("2607201426072014260720142607", false); //it can be generated randomly
    public final String name = "2607 Scouting Server";                       //the name of the service
    public final String url  =  "btspp://localhost:" + uuid         //the service url
                                + ";name=" + name;
    LocalDevice local = null;
    StreamConnectionNotifier server = null;
    StreamConnection conn = null;
    ArrayList<client> clientele;
    public void BTServer() throws IOException
    {
        
        clientele = new ArrayList<client>();
        Thread me = new Thread( new Runnable()
        {
            @Override
            public void run()
            {
                try {
                    System.out.println("Make me \"Discoverable\"");
                    local = LocalDevice.getLocalDevice();
                    local.setDiscoverable(DiscoveryAgent.GIAC);
                    
                    System.out.println("Open the service");
                    server = (StreamConnectionNotifier)Connector.open(url);
                    System.out.println("Wait for death");
                    while (true)
                    {
                        clientele.add(new client(server.acceptAndOpen()).start());
                        System.out.print("Connected Clients: ");
                        System.out.println(clientele.size());
                    }
                } catch (Exception ex) {
                }
            }
        });
        me.start();
    }
private class client implements Runnable
{
        StreamConnection conn;
        Thread me;
        public client(StreamConnection c)
        {
            conn = c;
            me = new Thread(this);
        }
        public client start()
        {
            me.start();
            return this;
        }
        @Override
        public void run() {
            try {
                            System.out.println("Client connected with id "+conn.toString());
                            InputStream Is = conn.openInputStream();
                            DataOutputStream echo = conn.openDataOutputStream();
                            while (true)
                            {
                                System.out.println("Waiting for data...");
                                ByteBuffer packet = Networker.recieve(Is);
                                HashMap data = Networker.unpack(packet);
                                SQLiteManager.addData(data);
                                handleData(data);
                                echo.writeBoolean(redWon.isSelected());
                                echo.writeBoolean(blueWon.isSelected());
                                echo.flush();
                                System.out.println("Done doing data...");
                            }
                        } catch (Exception ex) {
                            System.out.println("EX: "+ex.getMessage());
                        }
        }
    
}
}